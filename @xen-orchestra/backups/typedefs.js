/**
 * Represents an opaque reference in the format `OpaqueRef:...`.
 * @typedef {`OpaqueRef:${string}`} OpaqueRef
 */

/**
 * @typedef {Object} VBD
 * @property {OpaqueRef} VDI
 * @property {OpaqueRef} VM
 * @property {string[]} allowed_operations
 * @property {boolean} bootable
 * @property {Object} current_operations
 * @property {boolean} currently_attached
 * @property {"xvda" | string} device
 * @property {boolean} empty
 * @property {OpaqueRef} metrics
 * @property {"RW" | "RO" | string} mode
 * @property {Object} other_config
 * @property {Object} qos_algorithm_params
 * @property {string} qos_algorithm_type
 * @property {string[]} qos_supported_algorithms
 * @property {Object} runtime_properties
 * @property {number} status_code
 * @property {string} status_detail
 * @property {boolean} storage_lock
 * @property {"Disk" | string} type
 * @property {boolean} unpluggable
 * @property {"0" | string} userdevice
 * @property {string} uuid
 */

/**
 * @typedef {Object} VDI
 * @property {string} $SR$uuid
 * @property {string} $snapshot_of$uuid
 * @property {OpaqueRef} SR
 * @property {OpaqueRef[]} VBDs
 * @property {boolean} allow_caching
 * @property {boolean} allowed_operations
 * @property {boolean} cbt_enabled
 * @property {string[]} crash_dumps
 * @property {Object} current_operations
 * @property {boolean} is_a_snapshot
 * @property {boolean} is_tools_iso
 * @property {string} location
 * @property {string} managed
 * @property {boolean} metadata_latest
 * @property {OpaqueRef} metadata_of_pool
 * @property {boolean} missing
 * @property {string} name_description
 * @property {string} name_label
 * @property {string} on_boot
 * @property {Object} other_config
 * @property {OpaqueRef} parent
 * @property {number} physical_utilisation
 * @property {boolean} read_only
 * @property {boolean} sharable
 * @property {{ 'vhd-parent': string }} sm_config
 * @property {OpaqueRef} snapshot_of
 * @property {string} snapshot_time
 * @property {Object[]} snapshots
 * @property {boolean} storage_lock
 * @property {string[]} tags
 * @property {string} type
 * @property {string} uuid
 * @property {number} virtual_size
 * @property {Object} xenstore_data
 */

/**
 * @typedef {Object.<OpaqueRef, VDI>} VDIs
 */

/**
 * @typedef {Record<OpaqueRef, VBD>} VBDs
 */

/**
 * @typedef {Record<OpaqueRef, string>} VHDs
 */

/**
* @typedef {Object} Metadata
* @property {Object.<OpaqueRef | string, boolean>} isVhdDifferencing
* @property {string} jobId
* @property {"delta" | "full"} mode
* @property {string} scheduleId
* @property {number} size
* @property {number} timestamp
 * @property {XenApiVdi } vbds
* @property {Record<OpaqueRef, VDI} vdis
* @property {"2.0.0" | string} version
* @property {VHDs} vhds
* @property {Object.<OpaqueRef, {
*   $network$VLAN: number,
*   $network$name_label: string,
*   $network$uuid: string,
*   MAC: string,
*   MAC_autogenerated: boolean,
*   MTU: number,
*   VM: OpaqueRef,
*   allowed_operations: string[],
*   current_operations: Object,
*   currently_attached: boolean,
*   device: "0" | string,
*   ipv6_addresses: string[],
*   ipv6_allowed: string[],
*   ipv6_configuration_mode: "None" | string,
*   ipv6_gateway: string,
*   locking_mode: "network_default" | string,
*   metrics: OpaqueRef,
*   network: OpaqueRef,
*   other_config: Object,
*   qos_algorithm_params: Object,
*   qos_algorithm_type: string,
*   qos_supported_algorithms: string[],
*   runtime_properties: Object,
*   status_code: number,
*   status_detail: string,
*   uuid: string
* }>} vifs
* @property {Object} vm
* @property {Object} vmSnapshot
* @property {Object[]} vtpms
* @property {string} [xva]
*/

/**
 * @typedef {Object} RemoteHandlerAbstract
 * @property {any} _remote - The connection to the remote system.
 * @property {any} _timeout - Timeout for operations.
 * @property {any} closeFile - Method to close a file.
 * @property {any} copy - Method to copy a file.
 * @property {() => Promise<any>} getInfo - Retrieves general information about the remote system.
 * @property {(file: any) => Promise<any>} getSizeOnDisk - Gets the disk size of a file.
 * @property {any} list - Method to list files.
 * @property {any} mkdir - Method to create a directory.
 * @property {any} openFile - Method to open a file.
 * @property {(file: any, data: any, options?: {dirMode?: any, flags?: string}) => Promise<void>} outputFile - Writes data to a file.
 * @property {(file: any, buffer: any, position: any) => Promise<void>} read - Reads data from a file.
 * @property {any} readFile - Reads the entire content of a file.
 * @property {any} rename - Renames a file.
 * @property {(dir: any) => Promise<void>} rmdir - Removes a directory.
 * @property {(file: any, len: any) => Promise<void>} truncate - Truncates a file to a specified length.
 * @property {any} unlink - Deletes a file.
 * @property {(file: any, buffer: any, position: any) => Promise<void>} write - Writes data to a file.
 * @property {any} writeFile - Writes the entire content of a file.
 * @property {() => Promise<void>} _forget - Forgets information related to the handler.
 * @property {() => Promise<void>} _sync - Synchronizes data with the remote storage.
 * @property {void} type - The type of the handler.
 * @property {(prefix: any) => PrefixWrapper | RemoteHandlerAbstract} addPrefix - Adds a prefix to all paths.
 * @property {(file: any, options?: {checksum?: boolean, ignoreMissingChecksum?: boolean}) => Promise<any>} createReadStream - Creates a readable stream.
 * @property {(path: string, input: ReadableStream, options?: {checksum?: boolean, dirMode?: number, validator?: (this: RemoteHandlerAbstract, path: string) => Promise<undefined>}) => Promise<void>} outputStream - Writes a stream to a file using a temporary file.
 * @property {() => Promise<void>} forget - Forgets cached data.
 * @property {(file: any) => Promise<any>} getSize - Gets the size of a file.
 * @property {(dir: any, options?: {filter?: any, ignoreMissing?: boolean, prependDir?: boolean}) => Promise<any>} __list - Internal method to list files.
 * @property {(path: any) => Promise<{dispose: () => Promise<void>}>} lock - Locks a path.
 * @property {(dir: any, options?: {mode?: any}) => Promise<void>} mktree - Creates a directory tree.
 * @property {(file: any, options?: {flags?: string}) => Promise<any>} __readFile - Reads a file (internal).
 * @property {(oldPath: any, newPath: any, options?: {checksum?: boolean}) => Promise<any>} __rename - Renames a file (internal).
 * @property {(oldPath: any, newPath: any, options?: {checksum?: boolean}) => Promise<any>} __copy - Copies a file (internal).
 * @property {(dir: any) => Promise<void>} rmtree - Removes a directory tree.
 * @property {() => Promise<void>} sync - Synchronizes with the remote system.
 * @property {() => Promise<{success: boolean, writeRate?: number, readRate?: number, step?: string, file?: any, error?: any}>} test - Tests the handler's performance.
 * @property {(file: any, options?: {checksum?: boolean}) => Promise<void>} __unlink - Deletes a file (internal).
 * @property {(file: any, data: any, options?: {flags?: string}) => Promise<void>} __writeFile - Writes data to a file (internal).
 * @property {(fd: any) => Promise<void>} __closeFile - Closes a file descriptor (internal).
 * @property {(dir: any, options?: {mode?: any}) => Promise<void>} __mkdir - Creates a directory (internal).
 * @property {(path: any, flags: any) => Promise<{fd: any, path: any}>} __openFile - Opens a file (internal).
 * @property {() => any} useVhdDirectory - Enables use of VHD directory.
 * @property {(fd: any) => Promise<void>} _closeFile - Closes a file descriptor (internal).
 * @property {(file: any, options?: {dirMode?: any}) => any} _createOutputStream - Creates an output stream (internal).
 * @property {(file: any, options: any) => Promise<void>} _createReadStream - Creates a readable stream (internal).
 * @property {(file: any, options: any) => Promise<void>} _createWriteStream - Creates a writable stream (internal).
 * @property {() => Promise<{}>} _getInfo - Retrieves system information (internal).
 * @property {(path: any) => Promise<() => Promise<void>>} _lock - Locks a path (internal).
 * @property {(file: any) => Promise<void>} _getSize - Gets the size of a file (internal).
 * @property {(dir: any) => Promise<void>} _list - Lists files in a directory (internal).
 * @property {(dir: any) => Promise<void>} _mkdir - Creates a directory (internal).
 * @property {(dir: any, options?: {mode?: any}) => any} _mktree - Creates a directory tree (internal).
 * @property {(path: any, flags: any) => Promise<void>} _openFile - Opens a file (internal).
 * @property {(file: any, data: any, options: {dirMode: any, flags: any}) => any} _outputFile - Writes data to a file (internal).
 * @property {(path: any, input: any, options: {dirMode: any, validator: any}) => Promise<void>} _outputStream - Writes a stream to a file (internal).
 * @property {(file: any, buffer: any, position: any) => void} _read - Reads data from a file (internal).
 * @property {(file: any, options: any) => Promise<void>} _readFile - Reads an entire file (internal).
 * @property {(oldPath: any, newPath: any) => Promise<void>} _rename - Renames a file (internal).
 * @property {(oldPath: any, newPath: any) => Promise<void>} _copy - Copies a file (internal).
 * @property {(dir: any) => Promise<void>} _rmdir - Removes a directory (internal).
 * @property {(dir: any) => any} _rmtree - Removes a directory tree (internal).
 * @property {(file: any) => Promise<void>} _unlink - Deletes a file (internal).
 * @property {(file: any, buffer: any, position: any) => Promise<void>} _write - Writes data to a file (internal).
 * @property {(fd: any, buffer: any, position: any) => Promise<void>} _writeFd - Writes data to a file descriptor (internal).
 * @property {(file: any, data: any, options: any) => Promise<void>} _writeFile - Writes an entire file (internal).
 * @property {boolean} isEncrypted - Indicates if the handler is encrypted.
 * @property {any} encryptionAlgorithm - The encryption algorithm used.
 */
```